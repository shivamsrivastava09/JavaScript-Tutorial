JavaScript Execution Context :
there are 2 types of the Contexts : {}
    1. Global execution Context.
    2. Function Execution Context.
    3. Eval Execution Context.

    {} --> 1. Memory Creation Phase / Creation Phase. (Only memory allocated for the variables.)
           2. Execution Phase (here code and the statement gets executed.)

code : let val1 = 10
       let val2 = 5
       function addNum(num1, num2){
        let total = num1 + num2
        return total
       }
       let result = addNum(val1, val2)
       let result2 = addNum(10, 5)

Execution for this Code :
1. {} Global Execution allocated in this
2. Memory Phase :
    val1 -> undefined
    val2 -> undefined
    addNum -> definitiom
    result -> undefined
    result2 -> undefined
3. Execution Phase
    val1 -> 10
    val2 -> 5
    addNum -> |new variable Environment  |
              |          +               |  //this will work only for the method (addNum).
              |Execution Phase           |  //this will be cleared after the function execution.


Call Stack : same as in java.
            